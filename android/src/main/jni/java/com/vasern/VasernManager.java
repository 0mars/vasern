// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from vasern.djinni

package com.vasern;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.module.annotations.ReactModule;
import com.rushingvise.reactcpp.ReactDjinni;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

@ReactModule(name = "VasernManager")
public final class VasernManager extends ReactContextBaseJavaModule {
    private final CppProxy mModule;

    public VasernManager(ReactApplicationContext reactContext) {
        super(reactContext);
        mModule = create(ReactDjinni.createReactBridge(reactContext));
    }

    @Override
    public String getName() {
        return "VasernManager";
    }

    private static native CppProxy create(com.rushingvise.reactcpp.ReactBridge bridge);

    @ReactMethod
    public void Startup(ReadableMap collect, Promise promise) {
        mModule.Startup(ReactDjinni.wrap(collect), ReactDjinni.wrap(promise));
    }

    @ReactMethod
    public void InsertRecords(String collect, ReadableArray records, Promise promise) {
        mModule.InsertRecords(collect, ReactDjinni.wrap(records), ReactDjinni.wrap(promise));
    }

    @ReactMethod
    public void DeleteRecords(String collect, ReadableArray ids, Promise promise) {
        mModule.DeleteRecords(collect, ReactDjinni.wrap(ids), ReactDjinni.wrap(promise));
    }

    @ReactMethod
    public void UpdateRecords(String collect, ReadableMap records, Promise promise) {
        mModule.UpdateRecords(collect, ReactDjinni.wrap(records), ReactDjinni.wrap(promise));
    }

    @ReactMethod
    public void RemoveAllCollections(Promise promise) {
        mModule.RemoveAllCollections(ReactDjinni.wrap(promise));
    }

    @ReactMethod
    public void RemoveAllRecords(String collect, Promise promise) {
        mModule.RemoveAllRecords(collect, ReactDjinni.wrap(promise));
    }

    @ReactMethod
    public void GetRecordsByQuery(String collect, ReadableMap query, Promise promise) {
        mModule.GetRecordsByQuery(collect, ReactDjinni.wrap(query), ReactDjinni.wrap(promise));
    }

    @ReactMethod
    public void CountRecordsByQuery(String collect, ReadableMap query, Promise promise) {
        mModule.CountRecordsByQuery(collect, ReactDjinni.wrap(query), ReactDjinni.wrap(promise));
    }

    @ReactMethod
    public void AllRecords(String collect, Promise promise) {
        mModule.AllRecords(collect, ReactDjinni.wrap(promise));
    }

    private static final class CppProxy
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        public void Startup(com.rushingvise.reactcpp.JavascriptMap collect, com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_Startup(this.nativeRef, collect, promise);
        }
        private native void native_Startup(long _nativeRef, com.rushingvise.reactcpp.JavascriptMap collect, com.rushingvise.reactcpp.JavascriptPromise promise);

        public void InsertRecords(String collect, com.rushingvise.reactcpp.JavascriptArray records, com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_InsertRecords(this.nativeRef, collect, records, promise);
        }
        private native void native_InsertRecords(long _nativeRef, String collect, com.rushingvise.reactcpp.JavascriptArray records, com.rushingvise.reactcpp.JavascriptPromise promise);

        public void DeleteRecords(String collect, com.rushingvise.reactcpp.JavascriptArray ids, com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_DeleteRecords(this.nativeRef, collect, ids, promise);
        }
        private native void native_DeleteRecords(long _nativeRef, String collect, com.rushingvise.reactcpp.JavascriptArray ids, com.rushingvise.reactcpp.JavascriptPromise promise);

        public void UpdateRecords(String collect, com.rushingvise.reactcpp.JavascriptMap records, com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_UpdateRecords(this.nativeRef, collect, records, promise);
        }
        private native void native_UpdateRecords(long _nativeRef, String collect, com.rushingvise.reactcpp.JavascriptMap records, com.rushingvise.reactcpp.JavascriptPromise promise);

        public void RemoveAllCollections(com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_RemoveAllCollections(this.nativeRef, promise);
        }
        private native void native_RemoveAllCollections(long _nativeRef, com.rushingvise.reactcpp.JavascriptPromise promise);

        public void RemoveAllRecords(String collect, com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_RemoveAllRecords(this.nativeRef, collect, promise);
        }
        private native void native_RemoveAllRecords(long _nativeRef, String collect, com.rushingvise.reactcpp.JavascriptPromise promise);

        public void GetRecordsByQuery(String collect, com.rushingvise.reactcpp.JavascriptMap query, com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_GetRecordsByQuery(this.nativeRef, collect, query, promise);
        }
        private native void native_GetRecordsByQuery(long _nativeRef, String collect, com.rushingvise.reactcpp.JavascriptMap query, com.rushingvise.reactcpp.JavascriptPromise promise);

        public void CountRecordsByQuery(String collect, com.rushingvise.reactcpp.JavascriptMap query, com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_CountRecordsByQuery(this.nativeRef, collect, query, promise);
        }
        private native void native_CountRecordsByQuery(long _nativeRef, String collect, com.rushingvise.reactcpp.JavascriptMap query, com.rushingvise.reactcpp.JavascriptPromise promise);

        public void AllRecords(String collect, com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_AllRecords(this.nativeRef, collect, promise);
        }
        private native void native_AllRecords(long _nativeRef, String collect, com.rushingvise.reactcpp.JavascriptPromise promise);
    }
}
